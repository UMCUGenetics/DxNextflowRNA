params {
    genome_fasta = '/hpc/diaggen/projects/RNAseq_Jade/data/hg38/GCA_000001405.15_GRCh38_no_alt_plus_hs38d1_analysis_set.fasta'
    genome_gtf = '/hpc/diaggen/projects/RNAseq_Jade/data/hg38/gencode.v43.annotation.gtf'
    genome_index = '/hpc/diaggen/projects/RNAseq_Jade/data/hg38/GCA_000001405.15_GRCh38_no_alt_plus_hs38d1_analysis_set.fasta.fai'
    star_index = ''
    drop_path = '/hpc/diaggen/projects/RNAseq_Jade/drop'
    bam = false
    genome_bed = ''
    rRNA_database_manifest = "/hpc/diaggen/projects/RNAseq_Jade/DxNextflowRNA/assets/sortmerna-db-default.txt"
    fastq_screen_config = "/hpc/diaggen/projects/RNAseq_Jade/FastQ_Screen_Genomes/fastq_screen.conf"    
    cluster_options = "--mail-user $params.email --mail-type FAIL --account=diaggen"
}

process {
    withLabel: FASTQC_0_11_8 {
        cpus = 2
        memory = { 1.GB * task.attempt }
        time = { (1.ms * fastq.sum{it.size()}/fastq.count{it} / 1000) * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:10G"

        publishDir {
            path = "$params.outdir/QC/FastQC"
            mode = 'link'
        }
    }

    withLabel: Sambamba_0_7_0_Merge {
        cpus = 10
        memory = { 5.GB * task.attempt }
        time = { (1.ms * bam_files.sum{it.size()} / 8500) * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:10G"

        publishDir {
            path = "$params.outdir/bam_files"
            mode = 'link'
        }
    }

    withLabel: MultiQC_1_10 {
        cpus = 2
        memory = { 5.GB * task.attempt }
        time = { 5.m * task.attempt }

        publishDir {
            path = "$params.outdir/QC"
            mode = 'link'
        }
    }

    withLabel : SortMeRNA_4_3_3 {
        time = '48h'
        penv = 'threaded'
        cpus = 10
        memory = '10G'
        publishDir.path = "${params.outdir}/QC/"
        publishDir.mode = 'copy'
        publishDir.saveAs = {filename ->
                       if (filename.indexOf("_rRNA_report.txt") > 0) "SorteMeRNA/logs/$filename"
                       else if (filename.indexOf("_filtered_rRNA.fastq.gz") > 0) "SorteMeRNA/rRNA-reads/$filename"
                       else null }          
    }
    withLabel: TrimGalore_0_6_5 {
        time = '14h'
        penv = 'threaded'
        cpus = 10
        memory = '6G'
        publishDir.path = "${params.outdir}/QC/TrimGalore"
        publishDir.mode = 'copy'
        publishDir.saveAs = {filename ->
                       if (filename.indexOf("_fastqc") > 0) "FastQC/$filename"
                       else if (filename.indexOf("trimming_report.txt") > 0) "logs/$filename"
                       else null }
    }

    withLabel :  STAR_2_7_3a_AlignReads  {
        time = '8h'
        penv = 'threaded'
        cpus = 4
        memory = '35G'
        publishDir.path = "${params.outdir}/STAR"
        publishDir.mode = 'copy'
        publishDir.saveAs = {filename -> if (filename.indexOf("_Log.out") > 0) "logs/$filename" 
                            else if  (filename.indexOf("_Log.final.out") > 0) "logs/$filename" 
                            else if  (filename.indexOf(".bam") > 0) "mapped/$filename" 
                            else if  (filename.indexOf("_SJ.out.tab") > 0) "SJ/$filename" 
                            else if  (filename.indexOf(".mate1") > 0) "unmapped/$filename" 
                            else if  (filename.indexOf(".mate2") > 0) "unmapped/$filename" }	 
    }

    withLabel : STAR_2_7_3a_GenomeGenerate {
        time = '2h'
        penv = 'threaded'
        cpus = 12
        memory = '64G'
        publishDir.path = "${params.outdir}/reference_resources/STAR"
        publishDir.mode = 'copy'
     }

    withLabel : Sambamba_0_7_0_Index {
          time = '5h'
          penv = 'threaded'
          cpus = 2
          memory = '10G'
          publishDir.path = "${params.outdir}/STAR"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf(".bai") > 0) "mapped/$filename" }
    }

    withLabel : Sambamba_0_7_0_Flagstat {
          time = '2h'
          penv = 'threaded'
          cpus = 2
          memory = '5G'
          publishDir.path = "${params.outdir}/Sambamba/Flagstats"
          publishDir.mode = 'copy'       
    }

    withLabel: PICARD_2_22_0_CollectMultipleMetrics {
        cpus = 2
        memory = { 5.GB * task.attempt }
        time = { (1.ms * bam_file.size() / 4500) * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:10G"

        publishDir {
            path = "$params.outdir/QC/Picard"
            mode = 'link'
        }
    }

    withLabel: PICARD_2_22_0_EstimateLibraryComplexity {
        cpus = 2
        memory = { 45.GB * task.attempt }
        time = { (2.ms * bam_file.size() / 3000) * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:60G"

        publishDir {
            path = "$params.outdir/QC/Picard"
            mode = 'link'
        }
    }

    withLabel: PICARD_2_22_0_FixMateInformation {
        cpus = 2
        memory = 25.GB
        time = '2h'
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"

        publishDir {
            path = "$params.outdir/QC/Picard"
            mode = 'link'
        }
    }

    withLabel: PICARD_2_22_0_UmiAwareMarkDuplicatesWithMateCigar {
        cpus = 2
        memory = 20.GB
        time = '3h'
        clusterOptions = "$params.cluster_options --gres=tmpspace:10G"

        publishDir {
            path = "$params.outdir/QC/Picard"
            mode = 'link'
        }
    }

    withLabel: RSeQC_3_0_1 {
          time = '2h'
          penv = 'threaded'
          cpus = 2
          memory = '25G'
          publishDir.path = "${params.outdir}/QC/RSeQC"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename ->
                         if (filename.indexOf("bam_stat.txt") > 0) "bam_stat/$filename"
                         else if (filename.indexOf("infer_experiment.txt") > 0) "infer_experiment/$filename"
                              else if (filename.indexOf("read_distribution.txt") > 0) "read_distribution/$filename"
                              else if (filename.indexOf("read_duplication.DupRate_plot.pdf") > 0) "read_duplication/$filename"
                              else if (filename.indexOf("read_duplication.DupRate_plot.r") > 0) "read_duplication/rscripts/$filename"
                              else if (filename.indexOf("read_duplication.pos.DupRate.xls") > 0) "read_duplication/dup_pos/$filename"
                              else if (filename.indexOf("read_duplication.seq.DupRate.xls") > 0) "read_duplication/dup_seq/$filename"
                              else if (filename.indexOf("RPKM_saturation.eRPKM.xls") > 0) "RPKM_saturation/rpkm/$filename"
                              else if (filename.indexOf("RPKM_saturation.rawCount.xls") > 0) "RPKM_saturation/counts/$filename"
                              else if (filename.indexOf("RPKM_saturation.saturation.pdf") > 0) "RPKM_saturation/$filename"
                              else if (filename.indexOf("RPKM_saturation.saturation.r") > 0) "RPKM_saturation/rscripts/$filename"
                              else if (filename.indexOf("inner_distance.txt") > 0) "inner_distance/$filename"
                              else if (filename.indexOf("inner_distance_freq.txt") > 0) "inner_distance/data/$filename"
                              else if (filename.indexOf("inner_distance_plot.r") > 0) "inner_distance/rscripts/$filename"
                              else if (filename.indexOf("inner_distance_plot.pdf") > 0) "inner_distance/plots/$filename"
                              else if (filename.indexOf("junction_plot.r") > 0) "junction_annotation/rscripts/$filename"
                              else if (filename.indexOf("junction.xls") > 0) "junction_annotation/data/$filename"
                              else if (filename.indexOf(".junction_annotation_log.txt") > 0) "junction_annotation/log/$filename"
                              else if (filename.indexOf("splice_events.pdf") > 0) "junction_annotation/events/$filename"
                              else if (filename.indexOf("splice_junction.pdf") > 0) "junction_annotation/junctions/$filename"
                              else if (filename.indexOf("junctionSaturation_plot.pdf") > 0) "junction_saturation/$filename"
                              else if (filename.indexOf("junctionSaturation_plot.r") > 0) "junction_saturation/rscripts/$filename"
                              else filename }
    }
/*
    withLabel: Qualimap_2_2_2d_1 {
          time = '2h'
          penv = 'threaded'
          cpus = 2
          memory = '5G'
          publishDir.path = "${params.outdir}/QC/Qualimap"
          publishDir.mode = 'link'
    }
*/
    withLabel: Preseq_2_0_3 {
          time = '3h'
          penv = 'threaded'
          cpus = 2
          memory = '15G'
          publishDir.path = "${params.outdir}/QC/Preseq"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf(".ccurve.txt") > 0) "complexity_curve/$filename" }
    }

    withLabel: Fastq_screen_0_15_3 {
          time = '2h'
          cpus = 2
          memory = '15G'
          publishDir.path = "${params.outdir}/QC/FastqScreen"
          publishDir.mode = 'copy'
    }

    withLabel: DROP_1_2_4 {
        cpus = 2
        memory = '64G'
        time = '24h'
        publishDir {
            path = "${params.outdir}/DROP"
            mode = 'copy'
        }
    }
}

report {
    enabled = true
    file = "$params.outdir/log/nextflow_report.html"
}

trace {
    enabled = true
    file = "$params.outdir/log/nextflow_trace.txt"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt'
}

timeline {
    enabled = true
    file = "$params.outdir/log/nextflow_timeline.html"
}

env {
    R_LIBS='/hpc/diaggen/projects/RNAseq_Jade/drop/R_lib:/usr/local/lib/R/library'
}

profiles {

    slurm {
        process {
            executor = 'slurm'
            queue = 'cpu'
            clusterOptions = "$params.cluster_options"

            errorStrategy = 'retry'
            maxRetries = 1
        }

        singularity {
            enabled = true
            runOptions = '-B /hpc:/hpc -B $TMPDIR:$TMPDIR'
            autoMounts = true
            cacheDir = '/hpc/diaggen/software/singularity_cache'
        }

        executor {
            queueSize = 1000
            pollInterval = '1min'
            queueStatInterval = '5min'
            submitRatelimit = '10sec'
        }

       mail {
            smtp.host = 'localhost'
        }
    }

    mac {
        docker.enabled = true
        docker.runOptions = '-v /Users:/Users'
    }
}
