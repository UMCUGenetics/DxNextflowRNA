/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

/*
Processes are ordered alphabetically

Each process's parameters are ordered as well:
first the custom parameters (alphabetic order),
followed by the compute resources.

*/
process {

    withName: FASTQC {
        clusterOptions = "${params.cluster_options}"
        ext.args       = '--quiet'
        publishDir     = [
            [
                path: "${params.outdir}/QC/fastqc",
                mode: params.publish_dir_mode,
            ]
        ]
        cpus           = { 2 }
        memory         = { 5.GB * task.attempt }
        time           = { (1.ms * reads.sum { it.size() } / reads.count { it } / 1000) * task.attempt }
    }

    withName: MULTIQC {
        clusterOptions = "${params.cluster_options}"
        ext.args       = { params.multiqc_title ? "--title \"${params.multiqc_title}\"" : "--title \"${params.analysis_id}\"" }
        ext.prefix     = { $ { params.analysis_id } }
        publishDir     = [
            [
                path: "${params.outdir}/QC",
                mode: params.publish_dir_mode,
            ]
        ]
        cpus           = { 2 }
        memory         = { 2.GB * task.attempt }
        time           = { 15.m * task.attempt }
    }

    // TODO: retrieve dynamic resources collectrnaseqmetrics
    withName: PICARD_COLLECTRNASEQMETRICS {
        clusterOptions = "${params.cluster_options} --gres=tmpspace:10G"
        ext.args       = '--STRAND_SPECIFICITY NONE'
        publishDir     = [
            [
                path: "${params.outdir}/QC/Picard",
                mode: params.publish_dir_mode,
            ]
        ]
        cpus           = { 2 }
        memory         = { 5.GB * task.attempt }
        time           = { 2.h * task.attempt }
    }

    withName: PRESEQ_LCEXTRAP {
        clusterOptions = "${params.cluster_options}"
        ext.args       = {
            [
                '-verbose',
                '-bam',
                '-defects',
                '-seed 1',
                '-seg_len 10000000',
            ].join(' ').trim()
        }
        publishDir     = [
            [
                path: "${params.outdir}/QC/lcextrap",
                mode: params.publish_dir_mode,
            ]
        ]
        cpus           = { 2 * task.attempt }
        memory         = { 5.GB * task.attempt }
        time           = { (1.ms * bam.size() / 3000) * task.attempt }
    }

    withName: 'RSEQC_(BAMSTAT|INNERDISTANCE|INFEREXPERIMENT|JUNCTIONANNOTATION|JUNCTIONSATURATION|READDISTRIBUTION|READDUPLICATION)' {
        clusterOptions = "${params.cluster_options}"
        publishDir     = [
            [
                path: "${params.outdir}/QC/rseqc",
                mode: params.publish_dir_mode,
            ]
        ]
        cpus           = { 2 * task.attempt }
        memory         = { (4.B * bam.size()) * task.attempt }
        time           = { (1.ms * bam.size() / 1600) * task.attempt }
    }

    // TODO: retrieve dynamic resources samtools
    withName: SAMTOOLS_CONVERT {
        clusterOptions = "${params.cluster_options}"
        publishDir     = [
            [
                path: "${params.outdir}/cram_files/",
                mode: params.publish_dir_mode,
                pattern: '*.cra?',
            ]
        ]
        cpus           = { 2 }
        memory         = { 16.GB * task.attempt }
        time           = { 4.h * task.attempt }
    }

    withName: SAMTOOLS_FLAGSTAT {
        clusterOptions = "${params.cluster_options}"
        publishDir     = [
            [
                path: "${params.outdir}/QC/samtools",
                mode: params.publish_dir_mode,
            ]
        ]
        cpus           = { 2 }
        memory         = { 5.GB * task.attempt }
        time           = { 1.h * task.attempt }
    }

    withName: SAMTOOLS_IDXSTATS {
        clusterOptions = "${params.cluster_options}"
        publishDir     = [
            [
                path: "${params.outdir}/QC/samtools",
                mode: params.publish_dir_mode,
            ]
        ]
        cpus           = { 2 }
        memory         = { 5.GB * task.attempt }
        time           = { 1.h * task.attempt }
    }

    withName: SAMTOOLS_INDEX {
        clusterOptions = "${params.cluster_options}"
        cpus           = { 2 }
        memory         = { 5.GB * task.attempt }
        time           = { 15.m * task.attempt }
    }

    withName: SAMTOOLS_MERGE {
        clusterOptions = "${params.cluster_options}"
        ext.args       = '--write-index'
        cpus           = { 2 }
        memory         = { 5.GB * task.attempt }
        time           = { (1.ms * bam.size() / 8000) * task.attempt }
    }

    withName: SAMTOOLS_STATS {
        clusterOptions = "${params.cluster_options}"
        publishDir     = [
            [
                path: "${params.outdir}/QC/samtools",
                mode: params.publish_dir_mode,
            ]
        ]
    }

    // TODO: retrieve dynamic resources sortmerna
    withName: SORTMERNA_INDEX {
        clusterOptions = "${params.cluster_options}"
        container      = 'https://community-cr-prod.seqera.io/docker/registry/v2/blobs/sha256/15/15b50826336c394eab2bf6d731f00729921598ffc6463278da6316e768b16b8b/data'
        ext.args       = '--index 1'
        publishDir     = [
            path: "${params.outdir}/genome/sortmerna",
            mode: params.publish_dir_mode,
        ]
        cpus           = { 2 * task.attempt }
        memory         = { 64.GB * task.attempt }
        time           = { 4.h * task.attempt }
    }

    // TODO: retrieve dynamic resources sortmerna
    withName: SORTMERNA_READS {
        clusterOptions = "${params.cluster_options}"
        container      = 'https://community-cr-prod.seqera.io/docker/registry/v2/blobs/sha256/15/15b50826336c394eab2bf6d731f00729921598ffc6463278da6316e768b16b8b/data'
        ext.args       = '--num_alignments 1 -v --index 0'
        publishDir     = [
            [
                path: { "${params.outdir}/sortmerna" },
                mode: params.publish_dir_mode,
                pattern: "*.log",
            ],
            [
                path: { params.save_non_ribo_reads ? "${params.outdir}/sortmerna" : params.outdir },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
                saveAs: { params.save_non_ribo_reads ? it : null },
            ],
        ]
        cpus           = { 12 * task.attempt }
        memory         = { 64.GB * task.attempt }
        time           = { 16.h * task.attempt }
    }

    withName: STAR_ALIGN {
        clusterOptions = "${params.cluster_options}"
        ext.args       = {
            [
                '--readFilesCommand zcat',
                '--outSAMtype BAM SortedByCoordinate',
                '--outSAMunmapped Within KeepPairs',
                '--twopassMode Basic',
                '--outReadsUnmapped Fastx',
                '--alignSJDBoverhangMin 10',
                '--chimJunctionOverhangMin 12',
                '--chimSegmentMin 12',
                '--outWigType bedGraph',
                '--outWigStrand Unstranded',
            ].join(' ').trim()
        }
        publishDir     = [
            [
                path: "${params.outdir}/QC/star_align",
                mode: params.publish_dir_mode,
            ]
        ]
        cpus           = { 6 * task.attempt }
        memory         = { 40.GB * task.attempt }
        time           = { (1.ms * reads.sum { it.size() } / reads.count { it } / 300) * task.attempt }
    }

    withName: SUBREAD_FEATURECOUNTS_GENE {
        ext.prefix = { "${meta.id}.gene" }
        ext.args   = {
            [
                "-g gene_id",
                "-J", // Count the number of reads supporting each exon-exon junction
                "-M", // Count multi-mapping reads
                "--extraAttributes gene_type,gene_name",
                "--largestOverlap",
                "--verbose",
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: "${params.outdir}/feature_counts/",
                mode: params.publish_dir_mode,
                saveAs: { filename ->
                filename.replace(".featureCounts", "").replace("cntrl", "cntrl.cntrl").replace("plusCHX", "plusCHX.chx")
                }
            ]
        ]
        cpus       = { 2 * task.attempt }
        memory     = { 36.GB * task.attempt }
        time       = { 8.h * task.attempt }
    }

    withName: SUBREAD_FEATURECOUNTS_EXON {
        ext.prefix = { "${meta.id}.exon" }
        ext.args   = {
            [
                "-g exon_id",
                "-J", // Count the number of reads supporting each exon-exon junction
                "-M", // Count multi-mapping reads
                "--extraAttributes gene_type,gene_name",
                "--largestOverlap",
                "--verbose",
            ].join(' ').trim()
        }
        publishDir = [
            [
                path: "${params.outdir}/feature_counts/",
                mode: params.publish_dir_mode,
                saveAs: { filename ->
                filename.replace(".featureCounts", "").replace("cntrl", "cntrl.cntrl").replace("plusCHX", "plusCHX.chx")
                }
            ]
        ]
        cpus       = { 2 * task.attempt }
        memory     = { 36.GB * task.attempt }
        time       = { 15.m * task.attempt }
    }

    withName: TRIMGALORE {
        clusterOptions = "${params.cluster_options}"
        publishDir     = [
            [
                path: "${params.outdir}/QC/trimgalore",
                mode: params.publish_dir_mode,
            ]
        ]
        cpus           = { 12 * task.attempt }
        memory         = { 5.GB * task.attempt }
        time           = { (1.ms * reads.sum { it.size() } / reads.count { it } / 170) * task.attempt }
    }

    withName: UMITOOLS_DEDUP {
        clusterOptions = "${params.cluster_options} --gres=tmpspace:40G"
        ext.args       = {
            [
                "--umi-separator=:",
                "--temp-dir \${TMPDIR}",
            ].join(' ').trim()
        }
        ext.prefix     = { "${meta.id}.dedup" }
        publishDir     = [
            [
                path: "${params.outdir}/QC/umitools_dedup",
                mode: params.publish_dir_mode,
            ]
        ]
        cpus           = { 6 * task.attempt }
        memory         = { 32.GB * task.attempt }
        time           = { 8.h * task.attempt }
    }
}
